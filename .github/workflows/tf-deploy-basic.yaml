on:
  workflow_call:
    inputs:
      github_artifact_path:
        description: "The path to save the artifacts"
        type: string
        required: false
        default: ""
      aws_account_id:
        description: "The AWS account ID"
        type: string
        required: true
      aws_region:
        description: "The AWS region"
        required: true
        type: string
      aws_role_name:
        description: "The name of the role to assume with OIDC"
        type: string
        required: false
        default: cicd-iac
      environment:
        description: "The environment name"
        type: string
        required: true
      tf_deploy_override:
        description: "If true, terraform apply will run regardless of branch"
        type: boolean
        required: false
        default: false
      tf_dir:
        description: "The directory where the Terraform files are located"
        type: string
        required: false
        default: .
      github_feedback:
        description: "Whether to post a comment on the PR with the Terraform plan"
        required: false
        type: boolean
        default: false
      tf_state_bucket:
        description: "The name of the S3 bucket to store the Terraform state"
        required: false
        type: string
      tf_state_key:
        description: "The name of the S3 key to store the Terraform state"
        required: false
        type: string
      tf_var_files:
        description: "Comma separated list of Terraform variable files to pass to the plan command"
        required: false
        type: string
      tf_vars:
        description: "Comma separated list of Terraform variables to pass to the plan command"
        required: false
        type: string
      tf_version:
        description: "The Terraform version to use"
        type: string
        required: false
        default: 1.5.6

jobs:
  terraform:
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    concurrency:
      group: ${{ github.workflow }}-${{ inputs.environment }}
      #group: ${{ github.head_ref || github.run_id }} # The order is random, so need to find another way to apply in a specific order
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.tf_dir }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ inputs.aws_account_id }}:role/${{ inputs.aws_role_name }}
          aws-region: ${{ inputs.aws_region }}

      - uses: actions/download-artifact@v4
        if: inputs.github_artifact_path != ''
        with:
          path: ${{ inputs.github_artifact_path }}

      - name: Terraform setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.tf_version }}
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: |
          tf_args=""
          if [ "${{ inputs.tf_state_bucket }}" != "" ]; then
            tf_args="$tf_args -backend-config=bucket=${{ inputs.tf_state_bucket }}"
          fi
          if [ "${{ inputs.tf_state_key }}" != "" ]; then
            tf_args="$tf_args -backend-config=key=${{ inputs.tf_state_key}}"
          fi

          echo running terraform init \
           -input=false \
           ${tf_args}

          terraform init \
           -input=false \
           ${tf_args}
      - name: Terraform Format
        id: fmt
        run: terraform fmt -recursive -check

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          # Terraform Plan Script
          # As this script grows, it may be worth moving into its own file.
          #
          # This script is responsible for running the terraform plan command and saving the output to a file.
          # Exit codes:
          # 0 - No changes
          # 1 - Error
          # 2 - Changes
          #
          # TODO: State lock is required if plan is being saved to a file. Are all backends supported?

          echo "Current working directory: $(pwd)"

          tf_args=''

          IFS=',' read -ra ADDR <<< "${{ inputs.tf_vars }}"
          for var in "${ADDR[@]}"; do
            tf_args+=" -var $var"
          done

          IFS=',' read -ra ADDR <<< "${{ inputs.tf_var_files }}"
          for var_file in "${ADDR[@]}"; do
            tf_args+=" -var-file=$var_file"
          done

          tf_plan_exitcode=0
          terraform plan \
           -detailed-exitcode \
           -input=false \
           -lock=false \
           -out="tfplan" \
           ${tf_args} || tf_plan_exitcode=$?

          echo "exitcode=$tf_plan_exitcode" >> $GITHUB_OUTPUT
          if [ $tf_plan_exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          fi

      - name: Create String Output
        id: tf-plan-string
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)
          TERRAFORM_SUMMARY_HEADER=$(grep -E -i 'No changes|Plan: ' <<< "$TERRAFORM_PLAN")

          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "$TERRAFORM_SUMMARY_HEADER" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

      - name: Terraform Apply
        if: (github.ref_name == github.event.repository.default_branch && github.event_name == 'push' && steps.plan.outputs.exitcode == '2') || inputs.tf_deploy_override == true
        run: terraform apply -auto-approve -input=false "tfplan"

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request' && inputs.github_feedback == true
        env:
          PLAN: "${{ steps.tf-plan-string.outputs.summary }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const environmentString = `Environment: PROD`;
            const output = `#### ${environmentString}
            * Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            * Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            * Terraform Validation 🤖${{ steps.validate.outcome }}
            * Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            ${process.env.PLAN}
            *Pusher: Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
            const comments = await github.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            const planComment = comments.data.find(c => c.body.includes(environmentString));
            if (planComment) {
              await github.issues.updateComment({
                issue_number: context.issue.number,
                comment_id: planComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            } else {
              await github.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }
