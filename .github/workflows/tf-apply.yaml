# Terraform Apply Workflow using the action dflook/terraform-github-actions
# This workflow is used to apply Terraform changes to an environment.
# This workflow utilizes either github environments variables or workflow inputs to pass to the terraform actions
name: Terraform Apply
on:
  workflow_call:
    inputs:
      environment:
        description: "Environment to deploy."
        type: string
      aws_account_id:
        description: "The AWS account ID."
        type: string
      aws_region:
        description: "The AWS region."
        type: string
      aws_role_name:
        description: "The name of the role to assume with OIDC."
        type: string
      aws_oidc_role_arn:
        description: "AWS OIDC IAM role to assume"
        type: string
      gh_artifact_path:
        description: "Path to download artifacts to. If unset, default action workspace is used. If both 'gh_artifact_path' and 'gh_artifact_name' are unset, artifacts are not downloaded."
        type: string
      gh_artifact_name:
        description: "Name of the artifact to download. If only 'gh_artifact_path' is set, then all artifacts are downloaded. If both 'gh_artifact_path' and 'gh_artifact_name' are unset, artifacts are not downloaded."
        type: string
      gh_checkout_ref:
        description: "The branch, tag or SHA to checkout."
        type: string
      gh_artifact_pattern:
        description: "A glob pattern to the artifacts that should be downloaded. Ignored if name is specified."
        type: string
      gh_artifact_merge_multiple:
        description: "When multiple artifacts are matched, this changes the behavior of the destination directories. If true, the downloaded artifacts will be in the same directory specified by path. If false, the downloaded artifacts will be extracted into individual named directories within the specified path. Optional. Default is 'false'."
        type: boolean
      tf_dir:
        description: "Path to the Terraform root module to apply."
        type: string
      tf_backend_configs:
        description: "ist of Terraform backend config values, one per line."
        type: string
      tf_backend_config_files:
        description: "List of Terraform backend config files to use, one per line. Paths should be relative to the GitHub Actions workspace."
        type: string
      tf_var_files:
        description: "List of tfvars files to use, one per line. Paths should be relative to the GitHub Actions workspace."
        type: string
      tf_vars:
        description: "Variables to set for the Terraform plan. This should be valid Terraform syntax."
        type: string
      tf_pre_run:
        description: "Command to run before Terraform is executed."
        type: string
    outputs:
      tf_outputs:
        description: "List of Terraform outputs captured."
        value: ${{ jobs.apply.outputs.tf_outputs }}
jobs:
  apply:
    outputs:
      tf_outputs: ${{ toJson(steps.tf_apply.outputs) }}
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      ENVIRONMENT: ${{ inputs.environment }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TF_DIR: ${{ inputs.tf_dir || vars.tf_dir || '.' }}
      TF_BACKEND_CONFIGS: ${{ inputs.tf_backend_configs || vars.tf_backend_configs }}
      TF_BACKEND_CONFIG_FILES: ${{ inputs.tf_backend_config_files || vars.tf_backend_config_files }}
      TF_VAR_FILES: ${{ inputs.tf_var_files || vars.tf_var_files }}
      TF_VARS: ${{ inputs.tf_vars || vars.tf_vars }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          ref: ${{ inputs.gh_checkout_ref }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4
        env:
          ROLE_TO_ASSUME: ${{ inputs.aws_oidc_role_arn || vars.aws_oidc_role_arn || format('arn:aws:iam::{0}:role/{1}', inputs.aws_account_id, inputs.aws_role_name) }}
          AWS_REGION: ${{ inputs.aws_region || vars.aws_region || 'eu-central-1' }}
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Artifacts
        env:
          GH_ARTIFACT_PATH: ${{ inputs.gh_artifact_path || vars.gh_artifact_path }}
          GH_ARTIFACT_NAME: ${{ inputs.gh_artifact_name || vars.gh_artifact_name }}
          GH_ARTIFACT_PATTERN: ${{ inputs.gh_artifact_pattern || vars.gh_artifact_pattern }}
          GH_ARTIFACT_MERGE_MULTIPLE: ${{ inputs.gh_artifact_merge_multiple || vars.gh_artifact_merge_multiple || false }}
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        if: env.GH_ARTIFACT_PATH != '' || env.GH_ARTIFACT_NAME != ''
        with:
          path: ${{ env.GH_ARTIFACT_PATH }}
          name: ${{ env.GH_ARTIFACT_NAME }}
          pattern: ${{ env.GH_ARTIFACT_PATTERN }}
          merge-multiple: ${{ env.GH_ARTIFACT_MERGE_MULTIPLE }}

      - name: Terraform Apply
        id: tf_apply
        uses: dflook/terraform-apply@8ffcf535ca17dd84586bcda5b072f3d7bde0a97c # v1
        env:
          TERRAFORM_PRE_RUN: |
            AWS_CLI_VERSION=2.15.36
            if [ -z "${{ inputs.tf_pre_run }}" ]; then
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-${AWS_CLI_VERSION}.zip" -o "awscliv2.zip" && unzip -qq -o awscliv2.zip && ./aws/install
            else
              eval "${{ inputs.tf_pre_run }}"
            fi
        with:
          label: ${{ env.ENVIRONMENT }}
          path: ${{ env.TF_DIR}}
          backend_config: ${{ env.TF_BACKEND_CONFIGS }}
          backend_config_file: ${{ env.TF_BACKEND_CONFIG_FILES }}
          var_file: ${{ env.TF_VAR_FILES }}
          variables: ${{ env.TF_VARS }}
          auto_approve: true

      - name: Summary
        if: steps.tf_apply.outputs != ''
        uses: tx-pts-dai/action-summary@v1.1.0
        with:
          summary_header: "Terraform Outputs | ${{ env.ENVIRONMENT}}"
          string: ${{ toJson(steps.tf_apply.outputs) }}
          data_type: "json"
