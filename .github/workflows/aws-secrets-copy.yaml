name: Copy AWS secret
# Copy an AWS secret from one AWS account to another
on:
  workflow_call:
    inputs:
      source_aws_region:
        description: "AWS Region"
        type: string
      source_aws_oidc_role_arn:
        description: "AWS OIDC IAM role to assume"
        type: string
      source_secret_name:
        description: "AWS secret name to copy from"
        type: string
      destination_aws_region:
        description: "AWS Region"
        type: string
      destination_aws_oidc_role_arn:
        description: "AWS OIDC IAM role to assume"
        type: string
      destination_secret_name:
        description: "AWS secret name to copy to (default to source secret name)"
        type: string
      secret_description:
        description: "The Description to attach to the AWS secret (default to source description)"
        type: string
      aws_tags:
        description: Tags to put on the created secret in the form '[{"Key":"key1", "Value":"value1"},{"Key":"key2", "Value":"value2"}]'
        type: string
  workflow_dispatch:
jobs:
  copy-aws-secret:
    name: Copy AWS secret
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.destination_aws_oidc_role_arn }}-${{ inputs.destination_secret_name}}
      cancel-in-progress: true
    steps:
      - name: Configure Source AWS credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4
        with:
          role-to-assume: ${{ inputs.source_aws_oidc_role_arn }}
          aws-region: ${{ inputs.source_aws_region }}

      - name: Get secret description
        if: inputs.secret_description != ''
        id: get-secret
        run: |
          SECRET_DESCRIPTION="$(aws secretsmanager describe-secret --output text --secret-id ${{ inputs.source_secret_name }} --query Description)"
          {
            echo "SOURCE_SECRET_DESCRIPTION<<EOF"
            echo "$SECRET_DESCRIPTION"
            echo "EOF"
          } >> $GITHUB_ENV

      - name: Get secret value
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            SECRET_VALUE, ${{ inputs.source_secret_name }}

      - name: Configure Destination AWS credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4
        with:
          role-to-assume: ${{ inputs.destination_aws_oidc_role_arn }}
          aws-region: ${{ inputs.destination_aws_region }}

      - name: Create or Update Secret
        env:
          SECRET_NAME: ${{ inputs.destination_secret_name || inputs.source_secret_name }}
          SECRET_DESCRIPTION: ${{ inputs.secret_description }}
          GITHUB_REPO: ${{ github.repository }}
          AWS_TAGS: ${{ inputs.aws_tags }}
        run: |
          SECRET_DESCRIPTION=${SECRET_DESCRIPTION:-$SOURCE_SECRET_DESCRIPTION}
          if [ "$(aws secretsmanager list-secrets  --filter Key=name,Values=$SECRET_NAME --query 'SecretList[0]')" == "null" ]; then
              aws secretsmanager create-secret --name "$SECRET_NAME" --secret-string "$SECRET_VALUE"
          else
              aws secretsmanager put-secret-value --secret-id "$SECRET_NAME" --secret-string "$SECRET_VALUE"
          fi
          aws secretsmanager update-secret --secret-id "$SECRET_NAME" --description "$SECRET_DESCRIPTION"
          if [ ! -z "$AWS_TAGS" ]; then
              aws secretsmanager tag-resource --secret-id "$SECRET_NAME" --tags "$AWS_TAGS"
          fi
