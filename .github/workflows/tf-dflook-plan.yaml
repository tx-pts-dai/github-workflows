# Test dflook plan workflow
on:
  workflow_call:
    inputs:
      aws_account_id:
        description: "The AWS account ID"
        type: string
        required: true
      aws_region:
        description: "The AWS region"
        required: false
        type: string
        default: eu-central-1
      aws_role_name:
        description: "The name of the role to assume with OIDC"
        type: string
        required: false
        default: cicd-iac
      environment:
        description: "The environment name"
        type: string
        required: true
      tf_dir:
        description: "The directory where the Terraform files are located"
        type: string
        required: false
        default: '.'
      tf_backend_configs:
        description: "Terraform backend configuration"
        required: false
        type: string
      tf_backend_files:
        description: "New line separated list of Terraform backend files to pass to the plan command"
        required: false
        type: string
      tf_var_files:
        description: "New line separated list of Terraform variable files to pass to the plan command"
        required: false
        type: string
      tf_vars:
        description: "New line separated list of Terraform variables to pass to the plan command"
        required: false
        type: string
jobs:
  terraform:
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    concurrency:
      group: ${{ github.workflow }}-${{ inputs.environment }}
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - run: |
          echo ${{ inputs.tf_backend_configs }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ inputs.aws_account_id }}:role/${{ inputs.aws_role_name }}
          aws-region: ${{ inputs.aws_region }}

      - name: Terraform Format
        uses: dflook/terraform-fmt-check@v1
        with:
          path: ${{ inputs.tf_dir }}
          backend_config: ${{ inputs.tf_backend_configs }}

      - name: Terraform Validate
        uses: dflook/terraform-validate@v1
        with:
          path: ${{ inputs.tf_dir }}
          backend_config: ${{ inputs.tf_backend_configs }}

      - name: Terraform Plan
        id: plan
        uses: dflook/terraform-plan@v1
        with:
          path: ${{ inputs.tf_dir }}
          backend_config: ${{ inputs.tf_backend_configs }}
          backend_config_file: ${{ inputs.tf_backend_files }}
          label: ${{ inputs.environment}}
          var_file: ${{ inputs.tf_var_files }}
          variables: ${{ inputs.tf_vars }}
          add_github_comment: changes-only

      - name: Create String Output
        if: github.event_name == 'pull_request'
        id: tf-plan-string
        env:
          TERRAFORM_PLAN_PATH: ${{ steps.plan.outputs.text_plan_path }}
        run: |
          TERRAFORM_PLAN=$(cat $TERRAFORM_PLAN_PATH)
          TERRAFORM_SUMMARY_HEADER=$(grep -E -i -m 1 'No changes|Plan:|Outputs:' <<< "$TERRAFORM_PLAN")

          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "$TERRAFORM_SUMMARY_HEADER" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      - name: Publish Terraform Plan to Task Summary
        if: github.event_name == 'pull_request'
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
