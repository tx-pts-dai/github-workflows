# Workflow to cleanup Terraform workspaces
# Can be used when a PR is closed or merged
# This workflow will destroy the Terraform workspace and remove the state file from the backend
name: Terraform Preview Cleanup
on:
  workflow_call:
    inputs:
      environment:
        description: "Environment to deploy"
        type: string
      aws_account_id:
        description: "The AWS account ID."
        type: string
      aws_region:
        description: "The AWS region."
        type: string
      aws_role_name:
        description: "The name of the role to assume with OIDC."
        type: string
      aws_oidc_role_arn:
        description: "AWS OIDC IAM role to assume"
        type: string
      gh_checkout_ref:
        description: "The branch, tag or SHA to checkout."
        type: string
      tf_dir:
        description: "Terraform directory"
        type: string
      tf_backend_configs:
        description: "Terraform backend config cli arguments"
        type: string
      tf_backend_config_files:
        description: "List of Terraform backend config files to use, one per line. Paths should be relative to the GitHub Actions workspace."
        type: string
      tf_var_files:
        description: "New line separated list of terraform variable files"
        type: string
      tf_vars:
        description: "New line separated list of terraform variables"
        type: string
      tf_pre_run:
        description: "Command to run before Terraform is executed."
        type: string
      tf_workspace:
        description: "Terraform workspace"
        type: string
jobs:
  cleanup:
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      ENVIRONMENT: ${{ inputs.environment }}
      AWS_DEFAULT_REGION: ${{ inputs.aws_region || vars.aws_region}}
      TF_DIR: ${{ inputs.tf_dir || vars.tf_dir || '.' }}
      TF_BACKEND_CONFIGS: ${{ inputs.tf_backend_configs || vars.tf_backend_configs }}
      TF_BACKEND_CONFIG_FILES: ${{ inputs.tf_backend_config_files || vars.tf_backend_config_files }}
      TF_VAR_FILES: ${{ inputs.tf_var_files || vars.tf_var_files }}
      TF_VARS: ${{ inputs.tf_vars || vars.tf_vars }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          ref: ${{ inputs.gh_checkout_ref }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4
        env:
          ROLE_TO_ASSUME: ${{ inputs.aws_oidc_role_arn || vars.aws_oidc_role_arn || format('arn:aws:iam::{0}:role/{1}', inputs.aws_account_id, inputs.aws_role_name) }}
          AWS_REGION: ${{ inputs.aws_region || vars.aws_region || 'eu-central-1' }}
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false # Important: disable the wrapper to avoid conflicts with dflook action

      - name: Terraform workspace list
        id: workspace_list
        run: |
          # if TF_BACKEND_CONFIGS is defined as a multiline string we need to convert it to a file
          cat <<EOT > ${{ env.TF_DIR }}/tf-cleanup-workflow.tmp
          ${{ env.TF_BACKEND_CONFIGS }} 
          EOT
          # if the file tf-cleanup-workflow.tmp is empty we need to use TF_BACKEND_CONFIG_FILES.
          # This doesn't support TF_BACKEND_CONFIG_FILES defined as multiline.
          # otherwise we need to add quotes to the values in tf-cleanup-workflow.tmp
          # and we need to put a key value on each line (in case the TF_BACKEND_CONFIGS was a single liner)
          if [[ $(wc -m <  "${{ env.TF_DIR }}/tf-cleanup-workflow.tmp") -lt 4 ]]; then
            # since we use chdir we need to remove the path. dflook requires the full path.
            STRING="${{ env.TF_BACKEND_CONFIG_FILES }}"
            PREFIX_TO_REMOVE="${{ env.TF_DIR }}/"
            NEW_STRING="${STRING#"$PREFIX_TO_REMOVE"}"
            BACKEND_CONFIG="-backend-config=$NEW_STRING"
          else
            tr ' ' '\n' < ${{ env.TF_DIR }}/tf-cleanup-workflow.tmp > ${{ env.TF_DIR }}/tf-cleanup-workflow-2.tmp
            sed 's/^\(.*\)=\(.*\)$/\1="\2"\n/' ${{ env.TF_DIR }}/tf-cleanup-workflow-2.tmp >> ${{ env.TF_DIR }}/tf-cleanup-workflow.tfbackend
            BACKEND_CONFIG="-backend-config=tf-cleanup-workflow.tfbackend"
          fi
          terraform -chdir=${{ env.TF_DIR }} init $BACKEND_CONFIG
          terraform -chdir=${{ env.TF_DIR }} workspace list > workspaces.txt

      - name: Sanitise Environment Variables
        run: |
          WORKSPACE="${{ inputs.tf_workspace || vars.tf_workspace || github.head_ref || github.ref_name }}"
          SANITISED_WORKSPACE="${WORKSPACE//\//-}"
          echo "TF_WORKSPACE=$SANITISED_WORKSPACE" >> $GITHUB_ENV

      - name: Check if workspace exists
        id: check_workspace
        run: |
          if grep -q "${{ env.TF_WORKSPACE}}" workspaces.txt; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Workspace '${{ env.TF_WORKSPACE }}' exists." && cat workspaces.txt
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Workspace '${{ env.TF_WORKSPACE }}' does not exist. Skipping destroy." && cat workspaces.txt
          fi

        shell: bash

      - name: Terraform Destroy
        uses: dflook/terraform-destroy-workspace@54fa37554f3e3f0d1353d864e61d4340b461fcb0 # v1
        if: ${{ steps.check_workspace.outputs.exists == 'true' }}
        id: first_try
        env:
          TERRAFORM_PRE_RUN: |
            AWS_CLI_VERSION=2.15.36
            if [ -z "${{ inputs.tf_pre_run }}" ]; then
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-${AWS_CLI_VERSION}.zip" -o "awscliv2.zip" && unzip -qq -o awscliv2.zip && ./aws/install
            else
              eval "${{ inputs.tf_pre_run }}"
            fi
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          path: ${{ env.TF_DIR}}
          backend_config: ${{ env.TF_BACKEND_CONFIGS }}
          backend_config_file: ${{ env.TF_BACKEND_CONFIG_FILES }}
          var_file: ${{ env.TF_VAR_FILES }}
          variables: ${{ env.TF_VARS }}

      - name: Retry Terraform Destroy
        uses: dflook/terraform-destroy-workspace@54fa37554f3e3f0d1353d864e61d4340b461fcb0 # v1
        if: ${{ steps.check_workspace.outputs.exists == 'true' && failure() && steps.first_try.outputs.failure-reason == 'destroy-failed' }}
        env:
          TERRAFORM_PRE_RUN: |
            AWS_CLI_VERSION=2.15.36
            if [ -z "${{ inputs.tf_pre_run }}" ]; then
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-${AWS_CLI_VERSION}.zip" -o "awscliv2.zip" && unzip -qq -o awscliv2.zip && ./aws/install
            else
              eval "${{ inputs.tf_pre_run }}"
            fi
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          path: ${{ env.TF_DIR}}
          backend_config: ${{ env.TF_BACKEND_CONFIGS }}
          backend_config_file: ${{ env.TF_BACKEND_CONFIG_FILES }}
          var_file: ${{ env.TF_VAR_FILES }}
          variables: ${{ env.TF_VARS }}
